

var scriptRun = function(script, obs) { //returns list of [{event: "a", states: {bt1: 0, bt2: 1}}...]
	var step = function(curStates) {
		var events = {req:[], blocked: []}
		map(function(t) {
				if (curStates[t] in script.requested[t])
					events.req.push(script.requested[t][curStates[t]])
				if (curStates[t] in script.blocked[t]) 
					events.blocked.push(script.blocked[t][curStates[t]])},
			Object.keys(curStates));
		var blockedEvents = events.blocked.flat()
		var reqEvents = map(function(e){return e[0]},events.req.flat())
		var filteredEvents = filter(function(e){
			return !blockedEvents.includes(e)}, reqEvents)
		// in case of no agreement on next event
		if (filteredEvents.length == 0)
			return {event: 'default', state: curStates}
		
		// for prototype sake, assume the probabilities are uniform
		//TODO: assign probability to events
		//TODO: use observation to force choice
		var nextEvent = sample(Categorical({vs: filteredEvents}))

		var newStates = map(function(t) {
			if (curStates[t] in script.requested[t]){
				var foundEvent = map(function(e){return e[0]},
									script.requested[t][curStates[t]]).indexOf(nextEvent)
				if (foundEvent != -1)
					return [t, script.requested[t][curStates[t]][foundEvent][1]]}
			if (curStates[t] in script.waited[t]){
				var foundEvent = map(function(e){return e[0]},
									script.waited[t][curStates[t]]).indexOf(nextEvent)
				if (foundEvent != -1)
					return [t, script.waited[t][curStates[t]][foundEvent][1]]}
			return [t, curStates[t]]},
			Object.keys(curStates));
		return {event: nextEvent, state: Object.fromEntries(newStates)}}
	
	var runScript = function() {
		var init = {events: [""], states: [script.init]}
		var runResult = reduce(function(time, acc){
			// run finished, pad the rest
			if (acc.events[time] == "default"){
				acc.events.push("default");
				acc.states.push(acc.states[time])
				return acc}
			var res = step(acc.states[time]);
			acc.events.push(res.event)
			acc.states.push(res.state)
			return acc}, init, [3,2,1,0]) //TODO reduce is rtl, find workaround?
		return runResult
	}
	return Infer({method: "SMC",particles: 500, rejuvKernel: "HMC"}, function(){
		var res = runScript();
		//condition(res.events.includes('o2') && res.events.includes('g1'))
		var winOdds = {d1: res.events.includes('h1'),
					   d2: res.events.includes('h2'),
					   d3: res.events.includes('h3'),}
		return winOdds
	})
}

// sample script, trusty monty hall
var bscript = {
	threads: ['bt1','bt2','bt3'],
	states: {bt1: [0, 1, 2, 3],
			 bt2: [0, 1, 2, 3],
			 bt3: [0, 1, 2, 3]},
	//events: ['default'] + ['g1', 'g2', 'g3', 'h1','h2','h3','o1','o2','o3'],
	requested: { bt1: { 0: [['h1',1],['h2',1],['h3',1]],
						1: [['g1',2],['g2',2],['g3',2]],
						2: [['o1',3],['o2',3],['o3',3]]},
				 bt2: {},
				 bt3: {}},
	waited: {bt1: {},
			 bt2: {0: [['h1',1],['h2',2],['h3',3]]},
			 bt3: {0: [['g1',1],['g2',2],['g3',3]]}},
	blocked: { bt1: {},
			   bt2: {1: ['o1'],
			   		 2: ['o2'],
			   		 3: ['o3']},
			   bt3: {1: ['o1'],
			   		 2: ['o2'],
			   		 3: ['o3']}},
	init: {bt1: 0,
		   bt2: 0,
		   bt3: 0},
	time: 3 //[0,1,2]
}

var generateBScript = function(n) {
	var s = {	threads: ['bt1','bt2','bt3'],
				states:{bt1: [0,1,2,3], bt2:[0], bt3:[0]},
				//events: ['default'], //not really used rn
				requested: {bt1: {0:[], 1:[], 2:[]},bt2: {}, bt3: {}},
				waited: {bt1: {} ,bt2: {0:[]}, bt3: {0:[]}},
				blocked: {bt1: {}, bt2: {}, bt3:{}},
				init: {bt1: 0, bt2: 0, bt3: 0},
			 	time: 3 //[0,1,2]
			}
	var b = Object.fromEntries(mapN(function(i) {
		var d = i+1
		s.states['bt2'].push(d)
		s.states['bt3'].push(d)
		s.requested.bt1[0].push(['h'+d,1])
		s.requested.bt1[1].push(['g'+d,2])
		s.requested.bt1[2].push(['o'+d,3])
		s.waited.bt2[0].push(['h'+d,d])
		s.waited.bt3[0].push(['g'+d,d])
		return [d, ['o'+d]]
		}, n))
	var blockedObj = {blocked: {bt1: {}, bt2: b, bt3:b}}
	return Object.assign(s, blockedObj)
}

const doorsNum = [	10,  30,  50,  70,  90, 110,
   130, 150, 170, 190, 210, 230,
   250, 270, 290, 310, 330, 350,
   370, 390, 410, 430, 450, 470,
   490
 ]

var times = map(function(n) {
	const script = generateBScript(n)
	var t = process.hrtime()
	var res = scriptRun(script)
	var t2 = process.hrtime(t)
	var t2_ns = t[0]*1000000000 + t[1]
	//console.log(res.getDist())
	return t2_ns/n
}, doorsNum)
display(times)


//scriptRun(res, undefined).getDist()
