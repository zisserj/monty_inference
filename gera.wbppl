var O = function (s) {
    return [].concat(
        s[1] != "1" && s[3] != "1" ? ["O1"] : [],
        s[1] != "2" && s[3] != "2" ? ["O2"] : [],
        s[1] != "3" && s[3] != "3" ? ["O3"] : []
    )
}

var uniform = function (a) {
    return a[discrete([1, 1, 1].splice(0, a.length))]
}

var transition = function (s) {
    return s == ""                       ? s + uniform(["H1", "H2", "H3"]) :
           s.charAt(s.length - 2) == "H" ? s + uniform(["G1", "G2", "G3"]) :
           s.charAt(s.length - 2) == "G" ? s + uniform(O(s)) :
           s;
};

var observe = function (s) {
    return s.substring(2); // We do not observe the H# part
};

var hmm = function (n) {
    var prev = (n == 1) ? { states: [""], observations: [] } : hmm(n - 1);
    var newState = transition(prev.states[prev.states.length - 1]);
    var newObs = observe(newState);
    return {
        states: prev.states.concat([newState]),
        observations: prev.observations.concat([newObs])
    };
};

var trueObservations = ['', 'G3', 'G3O2'];

var dist = Infer({ method: 'enumerate' }, function () {
    var r = hmm(trueObservations.length);
    factor(_.isEqual(r.observations, trueObservations) ? 0 : -Infinity);
    return r.states;
});

//viz.table(dist);
dist.getDist()